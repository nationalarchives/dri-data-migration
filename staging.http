@endpoint=http://localhost:7200/repositories/staging

### Update staging repository
PUT {{endpoint}}
Content-Type: text/turtle

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix rep: <http://www.openrdf.org/config/repository#>.
@prefix sr: <http://www.openrdf.org/config/repository/sail#>.
@prefix sail: <http://www.openrdf.org/config/sail#>.
@prefix graphdb: <http://www.ontotext.com/config/graphdb#>.

[] a rep:Repository ;
    rep:repositoryID "staging" ;
    rep:repositoryImpl [
        rep:repositoryType "graphdb:SailRepository" ;
        sr:sailImpl [
            sail:sailType "graphdb:Sail" ;

            graphdb:read-only "false" ;

            # Inference and Validation
            graphdb:ruleset "owl-max-optimized" ;
            graphdb:disable-sameAs "true" ;
            graphdb:check-for-inconsistencies "false" ;

            # Indexing
            graphdb:entity-id-size "32" ;
            graphdb:enable-context-index "false" ;
            graphdb:enablePredicateList "true" ;
            graphdb:enable-fts-index "false" ;
            graphdb:fts-indexes ("default" "iri") ;
            graphdb:fts-string-literals-index "default" ;
            graphdb:fts-iris-index "none" ;

            # Queries and Updates
            graphdb:query-timeout "0" ;
            graphdb:throw-QueryEvaluationException-on-timeout "false" ;
            graphdb:query-limit-results "0" ;

            # Settable in the file but otherwise hidden in the UI and in the RDF4J console
            graphdb:base-URL "http://example.org/owlim#" ;
            graphdb:defaultNS "" ;
            graphdb:imports "" ;
            graphdb:repository-type "file-repository" ;
            graphdb:storage-folder "storage" ;
            graphdb:entity-index-size "10000000" ;
            graphdb:in-memory-literal-properties "true" ;
            graphdb:enable-literal-index "true" ;
        ]
    ].

### Collections
POST {{endpoint}}
Content-Type: application/sparql-query
Accept: text/turtle

prefix ex: <http://example.com/schema/>

construct {
    ?s ex:collectionCode ?code.
} where {
    ?s ex:collectionCode ?code.
}

### Access conditions
POST {{endpoint}}
Content-Type: application/sparql-query
Accept: text/turtle

prefix ex: <http://example.com/schema/>

construct {
    ?s ex:accessConditionCode ?code;
      ex:accessConditionName ?accessConditionName.
} where {
    ?s ex:accessConditionCode ?code;
      ex:accessConditionName ?accessConditionName.
}

### Subsets count
POST {{endpoint}}
Content-Type: application/sparql-query
#Accept: text/turtle

prefix ex: <http://example.com/schema/>

select (count(distinct ?subsetReference) as ?x) where {
    ?subset ex:subsetReference ?subsetReference.
}

### Assets count
POST {{endpoint}}
Content-Type: application/sparql-query
#Accept: text/turtle

prefix ex: <http://example.com/schema/>

select (count(?assetReference) as ?x) where {
    ?asset ex:assetReference ?assetReference.
}

### Variations count
POST {{endpoint}}
Content-Type: application/sparql-query
#Accept: text/turtle

prefix ex: <http://example.com/schema/>

select (count(?variation) as ?x) where {
    ?variation ex:variationHasDigitalRecord ?variationHasDigitalRecord.
}

### Sensitivity reviews
POST {{endpoint}}
Content-Type: application/sparql-query
#Accept: text/turtle

prefix ex: <http://example.com/schema/>

select (count(?sr) as ?x) where {
    ?sr ex:sensitivityReviewDriId ?id.
}